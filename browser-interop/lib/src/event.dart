// Copyright (c) 2019 the Rampage Project Authors.
// Please see the AUTHORS file for details. All rights reserved.
// Use of this source code is governed by a zlib license that can be found in
// the LICENSE file.

@JS()
library rampage_browser_interop.src.event;

import 'package:js/js.dart';

import 'event_target.dart';
import 'js_object.dart';

/// The [Event] interface represents an event which takes place in the DOM.
///
/// An event can be triggered by the user action e.g. clicking the mouse button
/// or tapping keyboard, or generated by APIs to represent the progress of an
/// asynchronous task. It can also be triggered programmatically, such as by
/// calling the [HtmlElement.click] method of an element, or by defining the
/// event, then sending it to a specified target using
/// [EventTarget.dispatchEvent].
@JS('Event')
class Event extends JsObject {
  /// The name of the event (case-insensitive).
  external String get type;

  /// A reference to the target to which the event was originally dispatched.
  external EventTarget get target;

  /// A reference to the currently registered target for the event.
  ///
  /// This is the object to which the event is currently slated to be sent; it's
  /// possible this has been changed along the way through retargeting.
  external EventTarget get currentTarget;

  /// Whether the [Event] bubbles up through the DOM or not.
  external bool get bubbles;

  /// Whether the [Event] is cancelable.
  external bool get cancelable;

  /// Whether or not the [Event] can bubble across the boundary between the
  /// shadow DOM and the regular DOM.
  external bool get composed;

  /// Cancels the [Event] (if it is [cancelable]).
  external void preventDefault();

  /// For this particular [Event], no other listener will be called.
  ///
  /// Neither those attached on the same [Element], nor those attached on
  /// [Element]s which will be traversed later (in capture phase, for instance)
  external void stopImmediatePropagation();

  /// Stops the propagation of [Event]s further along in the DOM.
  external void stopPropagation();
}

/// Represents options for creating an [Event].
@JS()
@anonymous
class EventInit {
  /// Creates the [EventInit] options.
  external factory EventInit({
    bool bubbles = false,
    bool cancelable = false,
    bool composed = false,
  });

  /// Whether the [Event] bubbles up through the DOM or not.
  external bool get bubbles;
  external set bubbles(bool value);

  /// Whether the [Event] is cancelable.
  external bool get cancelable;
  external set cancelable(bool value);

  /// Whether or not the [Event] can bubble across the boundary between the
  /// shadow DOM and the regular DOM.
  external bool get composed;
  external set composed(bool value);
}
