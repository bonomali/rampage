// Copyright (c) 2019 the Rampage Project Authors.
// Please see the AUTHORS file for details. All rights reserved.
// Use of this source code is governed by a zlib license that can be found in
// the LICENSE file.

@JS()
library rampage_browser_interop.src.events;

import 'package:js/js.dart';

import 'js_object.dart';

//------------------------------------------------------------------------------
// Events
//------------------------------------------------------------------------------

/// The [Event] interface represents an event which takes place in the DOM.
///
/// An event can be triggered by the user action e.g. clicking the mouse button
/// or tapping keyboard, or generated by APIs to represent the progress of an
/// asynchronous task. It can also be triggered programmatically, such as by
/// calling the [HtmlElement.click] method of an element, or by defining the
/// event, then sending it to a specified target using
/// [EventTarget.dispatchEvent].
@JS('Event')
class Event extends JsObject {
  /// A reference to the target to which the event was originally dispatched.
  external EventTarget get target;

  /// A reference to the currently registered target for the event.
  ///
  /// This is the object to which the event is currently slated to be sent; it's
  /// possible this has been changed along the way through retargeting.
  external EventTarget get currentTarget;

  /// Whether the [Event] bubbles up through the DOM or not.
  external bool get bubbles;

  /// Whether the [Event] is cancelable.
  external bool get cancelable;

  /// Whether or not the [Event] can bubble across the boundary between the
  /// shadow DOM and the regular DOM.
  external bool get composed;

  /// Cancels the [Event] (if it is [cancelable]).
  external void preventDefault();

  /// For this particular [Event], no other listener will be called.
  ///
  /// Neither those attached on the same [Element], nor those attached on
  /// [Element]s which will be traversed later (in capture phase, for instance)
  external void stopImmediatePropagation();

  /// Stops the propagation of [Event]s further along in the DOM.
  external void stopPropagation();
}

/// Represents options for creating an [Event].
@JS()
@anonymous
class EventInit {
  /// Creates the [EventInit] options.
  external factory EventInit({
    bool bubbles = false,
    bool cancelable = false,
    bool composed = false,
  });

  /// Whether the [Event] bubbles up through the DOM or not.
  external bool get bubbles;
  external set bubbles(bool value);

  /// Whether the [Event] is cancelable.
  external bool get cancelable;
  external set cancelable(bool value);

  /// Whether or not the [Event] can bubble across the boundary between the
  /// shadow DOM and the regular DOM.
  external bool get composed;
  external set composed(bool value);
}

//------------------------------------------------------------------------------
// CustomEvent
//------------------------------------------------------------------------------

/// The [CustomEvent] interface represents events initialized by an application
/// for any purpose.
@JS('CustomEvent')
class CustomEvent extends Event {
  /// Creates a [CustomEvent] with the given [type].
  ///
  /// The [eventInitDict] can be used to customize the behavior of the event
  /// as well as attaching data through [CustomEventInit.detail].
  external factory CustomEvent(String type, [CustomEventInit eventInitDict]);

  /// Any data passed when initializing the event.
  external dynamic get detail;
}

/// Represents options for creating a [CustomEvent].
@JS()
@anonymous
class CustomEventInit extends EventInit {
  /// Creates the [CustomEventInit] options.
  external factory CustomEventInit({
    bool bubbles = false,
    bool cancelable = false,
    bool composed = false,
    dynamic detail,
  });

  /// Data to pass to the event.
  external dynamic get detail;
  external set detail(dynamic value);
}

//------------------------------------------------------------------------------
// EventTarget
//------------------------------------------------------------------------------

/// [EventTarget] is a DOM interface implemented by objects that can receive
/// events and may have listeners for them.
@JS('EventTarget')
class EventTarget extends JsObject {
  /// Registers an event handler of a specific event type on the [EventTarget].
  external void addEventListener(String type, EventListener callback,
      [AddEventListenerOptions options]);

  /// Removes an event listener from the [EventTarget].
  external void removeEventListener(String type, EventListener callback,
      [EventListenerOptions options]);

  /// Dispatches an [Event] to this [EventTarget].
  external bool dispatchEvent(Event event);
}

/// A function that can handle an event dispatched by an [EventTarget] object.
typedef EventListener = void Function(Event event);

/// Represents options that represent characteristics about an event listener.
@JS()
@anonymous
class EventListenerOptions {
  /// Indicates that [Event]s of this type will be dispatched to the registered
  /// listener before being dispatched to any [EventTarget] beneath it in the
  /// DOM tree.
  external bool get capture;
  external set capture(bool value);
}

/// Represents options that represent characteristics about an event listener.
@JS()
@anonymous
class AddEventListenerOptions extends EventListenerOptions {
  /// Creates the [AddEventListenerOptions].
  external factory AddEventListenerOptions({
    bool capture = false,
    bool passive = false,
    bool once = false,
  });

  /// If true, indicates that the function specified by listener will never call
  /// [Event.preventDefault].
  external bool get passive;
  external set passive(bool value);

  /// Indicates that the listener should be invoked at most once after being
  /// added.
  ///
  /// If `true`, the listener would be automatically removed when invoked.
  external bool get once;
  external set once(bool value);
}
